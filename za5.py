"""

Задание 5.1
В задании создан словарь, с информацией о разных устройствах.
Необходимо запросить у пользователя ввод имени устройства (r1, r2 или sw1).
И вывести информацию о соответствующем устройстве на стандартный поток вывода
(информация будет в виде словаря).
Пример выполнения скрипта:
$ python task_5_1.py
Введите имя устройства: r1
{'location': '21 New Globe Walk', 'vendor': 'Cisco', 'model': '4451', 'ios': '15.4', 'ip': '10.255.0.1'}
Ограничение: нельзя изменять словарь london_co.
"""

london_co = {
    "r1": {
        "location": "21 New Globe Walk",
        "vendor": "Cisco",
        "model": "4451",
        "ios": "15.4",
        "ip": "10.255.0.1",
    },
    "r2": {
        "location": "21 New Globe Walk",
        "vendor": "Cisco",
        "model": "4451",
        "ios": "15.4",
        "ip": "10.255.0.2",
    },
    "sw1": {
        "location": "21 New Globe Walk",
        "vendor": "Cisco",
        "model": "3850",
        "ios": "3.6.XE",
        "ip": "10.255.0.101",
        "vlans": "10,20,30",
        "routing": True,
    },
}
"""
name=input('Введите имя устройства: ')
print(london_co[name])

Задание 5.1a
Переделать скрипт из задания 5.1 таким образом, чтобы, кроме имени устройства,
запрашивался также параметр устройства, который нужно отобразить.
Вывести информацию о соответствующем параметре, указанного устройства.
Пример выполнения скрипта:
$ python task_5_1a.py
Введите имя устройства: r1
Введите имя параметра: ios

name=input('Введите имя устройства: ')
param=input('Введите имя параметра: ')
print(london_co[name][param])

Задание 5.1b
Переделать скрипт из задания 5.1a таким образом, чтобы, при запросе параметра,
отображался список возможных параметров. Список параметров надо получить из словаря,
а не прописывать вручную.
Вывести информацию о соответствующем параметре, указанного устройства.
Пример выполнения скрипта:
$ python task_5_1b.py
Введите имя устройства: r1
Введите имя параметра (location, vendor, model, ios, ip): ip
10.255.0.1
$ python task_5_1b.py
Введите имя устройства: sw1
Введите имя параметра (location, vendor, model, ios, ip, vlans, routing): ip
10.255.0.101
"""
"""
name=input('Введите имя устройства: ')
params=','.join(list(london_co[name].keys()))
##print(params)
param=input('Введите имя параметра {}: '.format(params))
print(london_co[name][param])
"""
"""
Задание 5.1c
Переделать скрипт из задания 5.1b таким образом, чтобы, при запросе параметра,
которого нет в словаре устройства, отображалось сообщение 'Такого параметра нет'.
Задание относится только к параметрам устройств, не к самим устройствам.
> Попробуйте набрать неправильное имя параметра  или несуществующий параметр,
> чтобы увидеть какой будет результат. А затем выполняйте задание.
Если выбран существующий параметр, вывести информацию о соответствующем параметре,
указанного устройства.
Пример выполнения скрипта:
$ python task_5_1c.py
Введите имя устройства: r1
Введите имя параметра (ios, model, vendor, location, ip): ips
Такого параметра нет
"""
"""
name=input('Введите имя устройства: ')
params=','.join(list(london_co[name].keys()))
##print(params)
param=input('Введите имя параметра {}: '.format(params))

print(london_co[name].get(param, "Такого параметра нет"))
"""
"""
Задание 5.1d
Переделать скрипт из задания 5.1c таким образом, чтобы, при запросе параметра,
пользователь мог вводить название параметра в любом регистре.
Пример выполнения скрипта:
$ python task_5_1d.py
Введите имя устройства: r1
Введите имя параметра (ios, model, vendor, location, ip): IOS
15.4
"""
"""
name=input('Введите имя устройства: ')
params=','.join(list(london_co[name].keys()))
##print(params)
param=input('Введите имя параметра {}: '.format(params))

print(london_co[name].get(param.lower(), "Такого параметра нет"))
"""
"""
Задание 5.2
Запросить у пользователя ввод IP-сети в формате: 10.1.1.0/24
Затем вывести информацию о сети и маске в таком формате:
Network:
10        1         1         0
00001010  00000001  00000001  00000000
Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000
Проверить работу скрипта на разных комбинациях сеть/маска.
Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)
Подсказка: Получить маску в двоичном формате можно так:
In [1]: "1" * 28 + "0" * 4
Out[1]: '11111111111111111111111111110000'
Ограничение: Все задания надо выполнять используя только пройденные темы.
"""
"""
ips=input('Введите IP-сеть: ')

ips2=ips.split("/")
ips3=ips2[0].split(".")
print("Network: ")
print("{:<10} {:<10} {:<10} {:<10}".format(ips3[0], ips3[1], ips3[2], ips3[3]))
print("{:08b}   {:08b}   {:08b}   {:08b}".format(int(ips3[0]), int(ips3[1]), int(ips3[2]), int(ips3[3])))
mask2="1" * int(ips2[1]) + "0" * (32-int(ips2[1]))
print("Mask: ")
print("/{}".format(ips2[1]))
print("{:<10} {:<10} {:<10} {:<10}".format(int(mask2[0:8], 2), int(mask2[8:16], 2),  int(mask2[16:24], 2), int(mask2[24:32]), 2))
print("{:<10} {:<10} {:<10} {:<10}".format(mask2[0:8], mask2[8:16], mask2[16:24], mask2[24:32]))

"""
"""
Задание 5.2a
Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.
Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16
Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28
Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:
Network:
10        0         1         0
00001010  00000000  00000001  00000000
Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000
Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24
Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)
Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"
А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000
"""
"""
ips=input('Введите адрес хоста: ')

ips2=ips.split("/")
ips3=ips2[0].split(".")
net_bin_str="{:08b}{:08b}{:08b}{:08b}".format(int(ips3[0]), int(ips3[1]), int(ips3[2]), int(ips3[3]))
net_it_bin=net_bin_str[0:int(ips2[1])] + "0" *(32-int(ips2[1]))

##print(net_it_bin)
print("Network: ")

print("{:<10} {:<10} {:<10} {:<10}".format(int(net_it_bin[0:8], 2), int(net_it_bin[8:16], 2),  int(net_it_bin[16:24], 2), int(net_it_bin[24:32]), 2))
print("{:<10} {:<10} {:<10} {:<10}".format(net_it_bin[0:8], net_it_bin[8:16], net_it_bin[16:24], net_it_bin[24:32]))


mask2="1" * int(ips2[1]) + "0" * (32-int(ips2[1]))
print("Mask: ")
print("/{}".format(ips2[1]))
print("{:<10} {:<10} {:<10} {:<10}".format(int(mask2[0:8], 2), int(mask2[8:16], 2),  int(mask2[16:24], 2), int(mask2[24:32]), 2))
print("{:<10} {:<10} {:<10} {:<10}".format(mask2[0:8], mask2[8:16], mask2[16:24], mask2[24:32]))
"""
"""
Задание 5.3
Скрипт должен запрашивать у пользователя:
* информацию о режиме интерфейса (access/trunk)
* номере интерфейса (тип и номер, вида Gi0/3)
* номер VLANа (для режима trunk будет вводиться список VLANов)
В зависимости от выбранного режима, на стандартный поток вывода, должна возвращаться
соответствующая конфигурация access или trunk (шаблоны команд находятся в списках
access_template и trunk_template).
При этом, сначала должна идти строка interface и подставлен номер интерфейса, а затем
соответствующий шаблон, в который подставлен номер VLANа (или список VLANов).
Ограничение: Все задания надо выполнять используя только пройденные темы. То есть эту
задачу можно решить без использования условия if и циклов for/while.
Подсказка:
Подводящим к этому заданию было задание 5.1. Чтобы было легче решить это задание,
можно посмотреть на задание 5.1 и разобраться как там получилось
вывести разную информацию в зависимости от ввода пользователя.
Ниже примеры выполнения скрипта, чтобы было проще понять задачу.
Пример выполнения скрипта, при выборе режима access:
$ python task_5_3.py
Введите режим работы интерфейса (access/trunk): access
Введите тип и номер интерфейса: Fa0/6
Введите номер влан(ов): 3
interface Fa0/6
switchport mode access
switchport access vlan 3
switchport nonegotiate
spanning-tree portfast
spanning-tree bpduguard enable
Пример выполнения скрипта, при выборе режима trunk:
$ python task_5_3.py
Введите режим работы интерфейса (access/trunk): trunk
Введите тип и номер интерфейса: Fa0/7
Введите номер влан(ов): 2,3,4,5
interface Fa0/7
switchport trunk encapsulation dot1q
switchport mode trunk
switchport trunk allowed vlan 2,3,4,5
"""
"""
access_template = [
    "switchport mode access",
    "switchport access vlan {}",
    "switchport nonegotiate",
    "spanning-tree portfast",
    "spanning-tree bpduguard enable",
]

trunk_template = [
    "switchport trunk encapsulation dot1q",
    "switchport mode trunk",
    "switchport trunk allowed vlan {}",
]
regim=input('Введите режим работы интерфейса (access/trunk): ')
interface=input('Введите тип и номер интерфейса: ')
vlan=input('Введите номер влан(ов): ')


print("interface {}".format(interface))
template = {"access": access_template, "trunk": trunk_template}
print("\n".join(template[regim]).format(vlan))
"""
"""
Задание 5.3a
Дополнить скрипт из задания 5.3 таким образом, чтобы, в зависимости
от выбранного режима, задавались разные вопросы в запросе о номере
VLANа или списка VLANов:
* для access: 'Введите номер VLAN:'
* для trunk: 'Введите разрешенные VLANы:'
"""

access_template = [
    "switchport mode access",
    "switchport access vlan {}",
    "switchport nonegotiate",
    "spanning-tree portfast",
    "spanning-tree bpduguard enable",
]

trunk_template = [
    "switchport trunk encapsulation dot1q",
    "switchport mode trunk",
    "switchport trunk allowed vlan {}",
]
regim=input('Введите режим работы интерфейса (access/trunk): ')
interface=input('Введите тип и номер интерфейса: ')

question = {"access": "Введите номер VLAN: ", "trunk": "Введите разрешенные VLANы: "}
vlan = input(question[regim])

print("interface {}".format(interface))
template = {"access": access_template, "trunk": trunk_template}
print("\n".join(template[regim]).format(vlan))